
import pandas as pd


"""
What will be needed in order to create user input:
    Listing anything with a file path:

    arcpy.env.workspace = "R:\Projects\Active\CW2020_Master\Working\Cityworks\Cityworks_WorkSummary_Integration\Gravity Mains\SS6966 Rehab\FY21-22\Pay App\ID QC\SS6966.gdb"
    arcpy.env.overwriteOutput= True

    tablePath = "R:\\Projects\\Active\\CW2020_Master\\Working\\Cityworks\\Cityworks_WorkSummary_Integration\\Gravity Mains\\SS6966 Rehab\\FY21-22\\Pay App\\ID QC\\SS6966.gdb"
    tableName = "SS6966_FY21_22_TABLE_PayApp1_thru_6"

    payapp = "1_thru_6"
    export = 'R:\\Projects\\Active\\CW2020_Master\\Working\\Cityworks\\Cityworks_WorkSummary_Integration\\Gravity Mains\\SS6966 Rehab\\FY21-22\Pay App\\ID QC\\SS6966_PayApp{}.csv'.format(payapp)
    csv = 'R:\\Projects\\Active\\CW2020_Master\\Working\\Cityworks\\Cityworks_WorkSummary_Integration\\Gravity Mains\\SS6966 Rehab\\FY21-22\Pay App\\ID QC\\SS6966_FY21-22_COLUMBIA_CONTRACTOR_WORK_SUMMARY_1-6_JoinStatus_Manual.csv'
"""

print("Program Initiated...")
print("Reading functions...")

def userInput():
    global csv
    global export
    global gdb
    global tableName
    global table
    global cipNumber

    csv = raw_input("Input file path and file name of manual edits from stage #1...")
    print("Create the correct CSV for ArcTable production...")

    payapp = raw_input("What pay app is this (eg. 1, 2, 3... or 1_thru_2, 1_thru_3...")
    cipNumber = raw_input("What's the cip number for the contract? (e.g SS6966)")
    fiscalYear = raw_input("Fiscal Year... (e.g FY21-22)")
    folderLocation = raw_input("What's the folder location? (e.g 'R:\\Projects\\Active\\CW2020_Master\\Working\\Cityworks\\Cityworks_WorkSummary_Integration\\Gravity Mains\\SS6966 Rehab\\FY21-22\Pay App\\ID QC')")

    export = '{}\\{}_{}_{}.csv'.format(folderLocation, cipNumber, fiscalYear, payapp)
    print(export)

    gdb = raw_input("Where's the gdb location?")
    tableName = raw_input("What's the table name?")
    table = gdb + "\\" + tableName
    arcpy.env.workspace = table

def correctExport():
    while True:
        export = userInput()

        while True:
            answer = str(raw_input('Run again if expor looks wrong? (y/n'))
            if answer in ('y', 'n'):
                break

        if answer == 'y':
            continue
        else:
            print("Let's continue! We are creating the csv to be created into an ArcTable")

            break

correctExport()

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
"""
Step #1
    Only use those that have joined.
"""
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def queryJoins(path, export):
    df= pd.read_csv(path)
    df= df.query('Join_Indicator_FacilityId_Original == "Join"')
    df.to_csv(export)
print("function 1 reading success...")
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
"""
Step #2
"""
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def tableProduction(csv):

    # Fields not in the CWS but in the GIS Table

    FIELD3 = "REHABCAT"
    FIELD4 = "REHABTYPE"
##    FIELD8 = "REHABLENGTH"
    FIELD10 = "CIPNUM"
    FIELD11 = "CONTRACTOR"
    FIELD13 = "WSP_ID"
    FIELD14 = "CONTRACTORSID"
    # ---------------------------------------

    # createing table and adding fields not from CWS

    arcpy.conversion.TableToTable(csv, gdb, tableName)
    arcpy.management.AddField(table, FIELD3, "LONG")
    arcpy.management.AddField(table, FIELD4, "LONG")
##    arcpy.management.AddField(table, FIELD8, "DOUBLE")
    arcpy.management.AddField(table, FIELD10, "TEXT")
    arcpy.management.AddField(table, FIELD11, "TEXT")
    arcpy.management.AddField(table, FIELD13, "LONG")
    arcpy.management.AddField(table, FIELD14, "LONG")

    arcpy.management.CalculateField(table, FIELD10, cipNumber)

print("function 2 reading fuccess...")
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
"""
Step #3
"""
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

def updateTable(query1, query2, query3, query4, query5, query6, query7, fieldRehabCat, fieldRehabType):
##    table = gdb + "\\" + table
    fields = [query1, query2, query3, query4, query5, query6, query7, fieldRehabCat, fieldRehabType]

    with arcpy.da.UpdateCursor(table, fields) as uCursor:
        for row in uCursor:
            if row[0]=='X':
                row[7] = 1
                row[8] = 1
            elif row[1]=='X':
                row[7] = 2
                row[8] = 1
            elif row[2]=='X':
                row[7] = 2
                row[8] = 2
            elif row[3]=='X':
                row[7] = 2
                row[8] = 3
            elif row[4]=='X':
                row[7] = 3
                row[8] = 1
            elif row[5]=='X':
                row[7] = 3
                row[8] = 1
            elif row[6]=='X':
                row[7] = 3
                row[8] = 2


            uCursor.updateRow(row)
print("function 3 reading success...")
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
"""
Step 1
"""
##queryJoins(csv, export)
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
"""
Step 2
"""
tableProduction(csv)
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
"""
Step 3
"""
wsp = "WSP_ID"
rehabCat = "REHABCAT"
rehabtype = "REHABTYPE"

query1 = "Mech_Heavy_Sewer_Cleaning"
query2 = "Pipe_Burst"
query3 = "CIPP"
query4 = "Open_Cut"
query5 = "PRD_0_8"
query6 = "PRD_8_16"
query7 = "PRD_16"

updateTable(query1, query2, query3, query4, query5, query6, query7, rehabCat, rehabtype)
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------


